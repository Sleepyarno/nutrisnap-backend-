
  // Return rounded values
  return {
    calories: Math.round(calories),
    protein: Math.round(protein * 10) / 10, // Round to 1 decimal place
    carbs: Math.round(carbs * 10) / 10,
    fat: Math.round(fat * 10) / 10,
    microNutrients: { // Placeholder micro-nutrients
      fiber: Math.round(fiber * 10) / 10,
      sugar: Math.round(sugar * 10) / 10,
      sodium: Math.round(100 + Math.random() * 400), // Random placeholder
      potassium: Math.round(150 + Math.random() * 250) // Random placeholder
    }
  };
}

// Start server if this file is run directly (Cloud Run entrypoint)
if (require.main === module) {
  try {
    const express = require('express');
    const cors = require('cors');
    const app = express();
    app.use(cors());
    app.use(express.json());

    // Health check route
    app.get('/', (req, res) => {
      console.log('Health check called on root path');
      res.status(200).send('OK');
    });
    
    // Simple handler that returns success for any request to make Cloud Run happy
    app.all('*', (req, res) => {
      console.log(`Received request at ${req.path}`);
      try {
        res.status(200).send('OK');
      } catch (error) {
        console.error('Error handling request:', error);
        res.status(500).send('Internal Server Error');
      }
    });

    const port = process.env.PORT || 8080;
    app.listen(port, () => {
      console.log(`Server running on port ${port}`);
    });
  } catch (error) {
    console.error('Error starting server:', error);
  }
}
